#!/usr/bin/env python
import argparse
import logging
import vcf
import sys

'''
Allele Frequency Table Data Structure:
		A 	C 	G 	T
chr1:1	
chr2:2
'''
__version__ = "0.1"

def getRegionsOfInterest(roi_bed_file):
    ''' Get the list of regions on interest '''
    ROI = dict()
    with open(roi_bed_file) as bedfile:
        for line in bedfile:
            (chr, start, end) = line.split('\t')
            start = int(start)
            end = int(end)
            assert(start == end - 1)
            pos = end
            if not chr in ROI:
            	ROI[chr] = dict()
            ROI[chr][pos] = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
    return ROI

def countSampleAlleles(vcffile, ROI):
    ''' Read vcffile get to allele depths '''
    logging.info(vcffile)
    logging.debug('\t'.join(["chr", "pos", "ref", "alt", "ref_ct", "alt_ct", "is_snp", "is_mono", "is_indel", "var_type"]))
    with open(vcffile, 'r') as vcf_file:
        vcf_reader = vcf.Reader(vcf_file)
        for record in vcf_reader:
            chr = record.CHROM
            if chr.startswith('chr'):
                chr = chr.replace('chr', '')
            pos = int(record.POS)
            if 'AO' in record.INFO:
            	alt_allele = record.INFO['AO']
            else:
                alt_allele = "-"
            logging.debug('\t'.join([record.CHROM, str(pos), record.REF, str(record.ALT),
                                    str(record.INFO['RO']), str(alt_allele),
                                    str(record.is_snp), str(record.is_monomorphic), str(record.is_indel), record.var_type
                                   ]))
            # Handle Reference first
            if record.REF == 'A' or record.REF == 'C' or record.REF == 'G' or record.REF == 'T':
                ROI[chr][pos][record.REF] += record.INFO['RO']
            # Handle alt alleles
            if 'AO' in record.INFO:
                for i, alt_allele in enumerate(record.ALT):
                    alt_allele = str(alt_allele)
                    if alt_allele == 'A' or alt_allele == 'C' or alt_allele == 'G' or alt_allele == 'T':
                        ROI[chr][pos][alt_allele] += record.INFO['AO'][i]

def printAlleleFrequencyTable(roi_bed_file, ROI):
    print("\t".join(["CHR", "POS", "A", "C", "G", "T"]))
    with open(roi_bed_file) as bedfile:
        for line in bedfile:
            (chr, start, end) = line.split('\t')
            start = int(start)
            end = int(end)
            assert(start == end - 1)
            pos = end
            print("\t".join([chr, str(pos), 
                             str(ROI[chr][pos]['A']), str(ROI[chr][pos]['C']), 
                             str(ROI[chr][pos]['G']), str(ROI[chr][pos]['T']) 
                             ]))

def doWork(args):
    ''' Main function for performing work 

		For each VCF in the sample list
		  For each locus in the VCF
		    sample_genotype = getSampleGenotype()
		    allele_depth = getAlleleDepth()
    '''
    logging.info("Reading Regions of Interest")
    ROI = getRegionsOfInterest(args.bed)

    logging.info("Scanning VCF Files")
    with open(args.vcflist) as vcffilelist:
        for vcffile in vcffilelist:
            vcffile = vcffile.strip('\n')
            countSampleAlleles(vcffile, ROI)

    printAlleleFrequencyTable(args.bed, ROI)

def main(argv):
    ''' Main Entry Point '''
    args = parseArguments(argv)
    logging.basicConfig(level=args.log_level)
    logging.info("ConstructAlleleFrequencyTable v%s" % __version__)
    logging.info(args)

    doWork(args)

def parseArguments(argv):
    ''' Parse Arguments '''
    parser = argparse.ArgumentParser(description="ConstructAlleleFrequencyTable")
    parser.add_argument('--log-level', help="Prints warnings to console by default",
                        default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"])

    parser.add_argument('-B', '--bed', required=True, help="Reference SNP list (BED file)")
    parser.add_argument('-L', '--vcflist', required=True, help="Text file of list of sample VCF files")
    args = parser.parse_args(argv)
    return args

if __name__ == "__main__":
	main(sys.argv[1:])