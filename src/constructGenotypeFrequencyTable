#!/usr/bin/env python
import argparse
import logging
import vcf
import sys

'''
Genotype Frequency Table Data Structure:
		A/A	A/C	A/G	A/T	C/C	C/G	C/T	G/G	G/T	T/T
chr1:1	
chr2:2
'''
__version__ = "0.1"

def getRegionsOfInterest(roi_bed_file):
    ''' Get the list of regions on interest '''
    ROI = dict()
    with open(roi_bed_file) as bedfile:
        for line in bedfile:
            (chr, start, end) = line.split('\t')
            start = int(start)
            end = int(end)
            assert(start == end - 1)
            pos = end
            if not chr in ROI:
            	ROI[chr] = dict()
            ROI[chr][pos] = {'A/A': 0, 'A/C': 0, 'A/G': 0, 'A/T': 0,
                                       'C/C': 0, 'C/G': 0, 'C/T': 0,
                                                 'G/G': 0, 'G/T': 0,
                                                           'T/T': 0}
    return ROI

def countSampleGenotypes(vcffile, ROI):
    ''' Read vcffile get to genotypes '''
    logging.info(vcffile)
    with open(vcffile, 'r') as vcf_file:
        vcf_reader = vcf.Reader(vcf_file)
        for record in vcf_reader:
            if record.is_indel:
                continue
            chr = record.CHROM
            if chr.startswith('chr'):
                chr = chr.replace('chr', '')
            pos = int(record.POS)
            for sample in record.samples:
                gt = sample.gt_bases
                if gt == 'C/A':
                    gt = 'A/C'
                elif gt == 'G/A':
                    gt = 'A/G'
                elif gt == 'T/A':
                    gt = 'A/T'
                elif gt == 'G/C':
                    gt = 'C/G'
                elif gt == 'T/C':
                    gt = 'C/T'
                elif gt == 'T/G':
                    gt = 'G/T'
                ROI[chr][pos][gt] += 1

def printGenotypeFrequencyTable(roi_bed_file, ROI):
    print("\t".join(["CHR", "POS", "A/A", "A/C", "A/G", "A/T", "C/C", "C/G", "C/T", "G/G", "G/T", "T/T"]))
    with open(roi_bed_file) as bedfile:
        for line in bedfile:
            (chr, start, end) = line.split('\t')
            start = int(start)
            end = int(end)
            assert(start == end - 1)
            pos = end
            print("\t".join([chr, str(pos), 
                             str(ROI[chr][pos]['A/A']), str(ROI[chr][pos]['A/C']),
                             str(ROI[chr][pos]['A/G']), str(ROI[chr][pos]['A/T']),
                             str(ROI[chr][pos]['C/C']), str(ROI[chr][pos]['C/G']),
                             str(ROI[chr][pos]['C/T']), str(ROI[chr][pos]['G/G']),
                             str(ROI[chr][pos]['G/T']), str(ROI[chr][pos]['T/T'])
                             ]))

def doWork(args):
    ''' Main function for performing work 

		For each VCF in the sample list
		  For each locus in the VCF
		    sample_genotype = getSampleGenotype()
    '''
    logging.info("Reading Regions of Interest")
    ROI = getRegionsOfInterest(args.bed)

    logging.info("Scanning VCF Files")
    with open(args.vcflist) as vcffilelist:
        for vcffile in vcffilelist:
            vcffile = vcffile.strip('\n')
            countSampleGenotypes(vcffile, ROI)

    printGenotypeFrequencyTable(args.bed, ROI)

def main(argv):
    ''' Main Entry Point '''
    args = parseArguments(argv)
    logging.basicConfig(level=args.log_level)
    logging.info("ConstructGenotypeFrequencyTable v%s" % __version__)
    logging.info(args)

    doWork(args)

def parseArguments(argv):
    ''' Parse Arguments '''
    parser = argparse.ArgumentParser(description="ConstructGenotypeFrequencyTable")
    parser.add_argument('--log-level', help="Prints warnings to console by default",
                        default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"])

    parser.add_argument('-B', '--bed', required=True, help="Reference SNP list (BED file)")
    parser.add_argument('-L', '--vcflist', required=True, help="Text file of list of sample VCF files")
    args = parser.parse_args(argv)
    return args

if __name__ == "__main__":
    main(sys.argv[1:])
